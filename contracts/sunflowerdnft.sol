// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts@4.7.3/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts@4.7.3/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts@4.7.3/access/Ownable.sol";
import "@openzeppelin/contracts@4.7.3/utils/Counters.sol";
import "@chainlink/contracts/src/v0.8/AutomationCompatible.sol";


contract seedNFT is ERC721, ERC721URIStorage, Ownable, AutomationCompatibleInterface {
    using Counters for Counters.Counter;

    // 

    string[] IpfsUri = [
        "https://ipfs.io/ipfs/QmR8bMU5tHTw8Eb95RPbizRRdEwwEuwcbKubnRwoA5YqKz/sunflower-stage1.json",
        "https://ipfs.io/ipfs/QmR8bMU5tHTw8Eb95RPbizRRdEwwEuwcbKubnRwoA5YqKz/sunflower-stage2.json",
        "https://ipfs.io/ipfs/QmR8bMU5tHTw8Eb95RPbizRRdEwwEuwcbKubnRwoA5YqKz/sunflower-stage3.json"
    ];

    uint interval;
    uint lastTimeStamp;

    Counters.Counter private _tokenIdCounter;

    constructor(uint _interval) ERC721("seedNFT", "dSUN") {
        interval = _interval;
        lastTimeStamp = block.timestamp;
    }

    function checkUpkeep(bytes calldata /* checkData */) external view override returns (bool upkeepNeeded, bytes memory /* performData */) {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        if ((block.timestamp - lastTimeStamp) > interval ) {
            lastTimeStamp = block.timestamp;
            
            uint counter = _tokenIdCounter.current();

            for(uint256 i = 0; i < counter; i++){
                if(stage(i) < 2){
                    pympRide(i);
                    break;
                }
            }

        }
        // We don't use the performData in this example. The performData is generated by the Automation Node's call to your checkUpkeep function
    }

    function safeMint(address to) public onlyOwner {
        uint256 tokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, IpfsUri[0]);
    }

    function pympRide(uint256 _tokenId) public{
        require(stage(_tokenId) < 2, "Sunflower can't grow past this.");

        uint256 newVal = stage(_tokenId) + 1;

        string memory newUri = IpfsUri[newVal];

        _setTokenURI(_tokenId, newUri);
    }

    // helper functions
    function stage(uint256 _tokenId) public view returns(uint256){
        string memory _uri = tokenURI(_tokenId);

        uint results;

        for (uint256 index = 0; index < IpfsUri.length; index++){
            if(keccak256(abi.encodePacked(IpfsUri[index])) == keccak256(abi.encodePacked(_uri)))
            {
                results = index;
            }
        }

        return results;

    }

    // The following functions are overrides required by Solidity.

    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
        super._burn(tokenId);
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }
}
